import os
import re
from functools import wraps
import sqlite3
from datetime import datetime, date
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, constants
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler, MessageHandler, filters
import asyncio
import aiohttp

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω—Å–∫–∏–º –∫–æ–º–∞–Ω–¥–∞–º
ADMIN_USER_ID = 466188582  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π ID

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
STATUS_EMOJI = {
    'tax_paid': '‚úÖ',      # –ù–∞–ª–æ–≥ —É–ø–ª–∞—á–µ–Ω
    'tax_free': 'üÜì',      # –û—Å–≤–æ–±–æ–∂–¥–µ–Ω –æ—Ç –Ω–∞–ª–æ–≥–∞
    'tax_unpaid': '‚ùå'     # –ù–∞–ª–æ–≥ –Ω–µ —É–ø–ª–∞—á–µ–Ω
}

CLAN_RULES_TEXT = """*RED ALERT*

*–ü—Ä–∞–≤–∏–ª–∞ –∫–ª–∞–Ω–∞:*

1. –ó–∞—à–µ–ª –≤ –∏–≥—Ä—É - –∑–∞—à–µ–ª –≤ –≥–æ–≤–æ—Ä–∏–ª–∫—É, –±–µ–∑ –≥–æ–ª–æ—Å–æ–≤–æ–π —Å–≤—è–∑–∏ –≤–∞—Å –Ω–µ—Ç, —Ö–æ—Ç—è –±—ã –≤ –∫–∞–Ω–∞–ª –∞—Ñ–∫\n 
2. –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–µ–º–±–µ—Ä–æ–≤. –í—Å—Ç—É–ø–∏–ª –≤ —á–∞—Ç - –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Å—è, —Ç–µ–±—è –¥–æ–±–∞–≤—è—Ç –≤ —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ –∫–Ω–æ–ø–∫–µ\n
3. –ö–∞—á –∂–∏–≤—ã—Ö —Å–∞–ø–ø–æ—Ä—Ç–æ–≤ –º–µ–π–Ω–æ–≤ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ, —Å–∞–º–æ —Å–æ–±–æ–π –ø—Ä–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ñ–∞–º, —É—Ä–æ–≤–Ω—é, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞—á–∞ (–Ω–∞ 20 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—Ç–æ –Ω–∏–∫–æ–≥–æ —É–∂–µ –Ω–µ –±–µ—Ä—É—Ç) –∏ —Ç.–¥.)\n
4. –£–≤–∞–∂–µ–Ω–∏–µ –∫ —Å–æ–∫–ª–∞–Ω–∞–º, –ª—é–¥–∏ —É –Ω–∞—Å –∏–≥—Ä–∞—é—Ç –≤–∑—Ä–æ—Å–ª—ã–µ, —Ä–∞–∑–Ω—ã–µ, –∫–∏–¥–∞—Ç—å—Å—è —Ö—É—è–º–∏ –∏ —Ç.–¥. –Ω–µ —Å–ª–µ–¥—É–µ—Ç, –∑–∞ –º–∞–º–∫–æ–µ–±—Å—Ç–≤–æ –∏ —Ç–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å –º–µ–º–±–µ—Ä—ã –±—É–¥—É—Ç –Ω–∞–∫–∞–∑–∞–Ω—ã. –¢–∞–∫–∂–µ –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ—Ä–∂–∞—Ç—å —Å–µ–±—è –≤ —Ä—É–∫–∞—Ö –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –Ω–µ —Å—Ç–æ—è–Ω–∏—è, –≤–∞—Å –≤–ø—Ä–∞–≤–µ –∑–∞–±–∞–Ω–∏—Ç—å –ª—é–±–æ–π –∞–¥–º–∏–Ω –Ω–∞ —á–∞—Å–æ–∫, –∞ –≤–æ–æ–±—â–µ –ª—É—á—à–µ –Ω–µ –∑–∞—Ö–æ–¥–∏—Ç—å –∏ –Ω–µ –µ–±–∞—Ç—å –ª—é–¥—è–º –º–æ–∑–≥–∏, –∫–æ–≥–¥–∞ –±—É—Ö–æ–π.\n
5. –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –∫–∞—á–∞ –Ω–∞ –∂–æ–ø–µ –≤ —Ä–µ–∂–∏–º–µ –∞—Ñ–∫. –õ—é–±–æ–π –ø–ª –∫–∞—á–∞—é—â–µ–π—Å—è –ø–∞—Ç–∏ –≤–ø—Ä–∞–≤–µ –Ω–µ –±—Ä–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞ –∫–∞—á, –µ—Å–ª–∏ –æ–Ω –±—É–¥–µ—Ç –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –∞—Ñk (–Ω–µ –ø—É—Ç–∞—Ç—å —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∞—Ñk –∏–ª–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—è–º–∏ –≤ –≤–∏–¥–µ –∞—Ñk –∫–∞—á–∞ –Ω—É–∂–Ω—ã—Ö –ø–µ—Ä—Å–æ–≤ –¥–ª—è –∫–ª–∞–Ω–∞)\n
6. K–∞–∂–¥—ã–π –º–µ–º–±–µ—Ä –ø–∞—Ç–∏ –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–Ω–æ—Å–∏—Ç—å –ø–æ–ª—å–∑—É (–º–∞–Ω–æ—Ä, —Å–ø–æ–π–ª, –±–∞—Ñ –æ–∫–Ω–æ–º, –¥–µ—Ñ —Å–ø–æ—Ç–∞, –¥—Ä—É–≥–∏–µ –ø—Ä–æ—Å—å–±—ã –ª–∏–¥–µ—Ä–∞ –ø–∞—Ç–∏)\n
7. –ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ä–∞—á –≤ —á–∞—Ç –≤–æ –≤—Ä–µ–º—è –∏–ª–∏ –ø–æ—Å–ª–µ –∑–∞–º–µ—Å–æ–≤, –∫–∞–∫ –≥–æ–≤–æ—Ä–∏—Ç—Å—è —Å–¥–æ—Ö –º–æ–ª—á–∞ –∏–ª–∏ –ø–æ–±–µ–¥–∏–ª –º–æ–ª—á–∞.\n

*–ù–∞–ª–æ–≥–∏:*
–ù–∞–ª–æ–≥ 15–∫–∫ –¥–ª—è –≤—Å–µ—Ö —á–∞—Ä–æ–≤ 75+ —É—Ä–æ–≤–Ω—è, —Å–¥–∞–µ—Ç—Å—è –¥–æ 5 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ –ö–í–•, —Å–∫—Ä–∏–Ω –≤ —ç—Ç–æ—Ç —á–∞—Ç –∏ —Ç–µ–≥–Ω—É—Ç—å Flaming
–°–¥–∞–Ω–Ω—ã–µ –Ω–∞–ª–æ–≥–∏ —Ç—Ä–µ–∫–∞—é—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∫–ª–∞–Ω–∞ (–ø–æ –∫–Ω–æ–ø–∫–µ –≤ –∑–∞–∫—Ä–µ–ø–µ)"""

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö


def init_db():
    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS users (
            mention TEXT PRIMARY KEY,
            nickname TEXT,
            tax_paid BOOLEAN DEFAULT FALSE,
            tax_free BOOLEAN DEFAULT FALSE,
            tax_paid_date DATE
        )
    ''')
    conn.commit()
    conn.close()

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞


def admin_required(func):
    @wraps(func)
    async def wrapped(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id == ADMIN_USER_ID:
            return await func(update, context, *args, **kwargs)
            
        chat_member = await context.bot.get_chat_member(update.effective_chat.id, user_id)
        if chat_member.status not in ['administrator', 'creator']:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º."
            )
            return
        return await func(update, context, *args, **kwargs)
    return wrapped

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã


def extract_user_mention(message_text: str, command: str) -> tuple[str, str] | None:
    pattern = f'^/{command}(?:\\s+(<a href="tg://user\\?id=\\d+">.*?</a>|@\\w+))(?:\\s+(.+))?$'
    match = re.match(pattern, message_text)
    if not match:
        return None
    return match.group(1), match.group(2)


def check_tax_expiration():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ —É–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–∞ –¥–ª—è –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
    today = date.today()
    first_day_of_month = date(today.year, today.month, 1)

    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''
        UPDATE users 
        SET tax_paid = FALSE 
        WHERE tax_free = FALSE 
        AND tax_paid = TRUE 
        AND tax_paid_date < ?
    ''', (first_day_of_month,))
    conn.commit()
    conn.close()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
    )


@admin_required
async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = extract_user_mention(update.message.text_html, 'add')
    if not result or not result[1]:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID –∏ –Ω–∏–∫–Ω–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /add @username <nickname>"
        )
        return

    mention, nickname = result

    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('INSERT OR REPLACE INTO users (mention, nickname, tax_paid, tax_free) VALUES (?, ?, FALSE, FALSE)',
              (mention, nickname))
    conn.commit()
    conn.close()

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –¥–æ–±–∞–≤–ª–µ–Ω —Å –Ω–∏–∫–Ω–µ–π–º–æ–º {nickname}",
        parse_mode="HTML"
    )


@admin_required
async def del_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = extract_user_mention(update.message.text_html, 'del')
    if not result:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /del @username"
        )
        return

    mention = result[0]

    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('DELETE FROM users WHERE mention = ?', (mention,))
    if c.rowcount > 0:
        conn.commit()
        message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞"
    else:
        message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ"
    conn.close()

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=message,
        parse_mode="HTML"
    )


@admin_required
async def set_tax_paid(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = extract_user_mention(update.message.text_html, 'tax')
    if not result:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /tax @username"
        )
        return

    mention = result[0]
    today = date.today()

    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('''
        UPDATE users 
        SET tax_paid = TRUE, tax_paid_date = ? 
        WHERE mention = ? AND tax_free = FALSE
    ''', (today, mention))

    if c.rowcount > 0:
        conn.commit()
        message = f"–û—Ç–º–µ—á–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞ –Ω–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mention}"
    else:
        c.execute('SELECT tax_free FROM users WHERE mention = ?', (mention,))
        result = c.fetchone()
        if result:
            if result[0]:
                message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –æ—Ç —É–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–∞"
            else:
                message = f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –æ–ø–ª–∞—Ç—É –Ω–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mention}"
        else:
            message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ"

    conn.close()

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=message,
        parse_mode="HTML"
    )


@admin_required
async def set_tax_free(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = extract_user_mention(update.message.text_html, 'tax_free')
    if not result:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /tax_free @username"
        )
        return

    mention = result[0]

    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('UPDATE users SET tax_free = TRUE, tax_paid = FALSE, tax_paid_date = NULL WHERE mention = ?',
              (mention,))

    if c.rowcount > 0:
        conn.commit()
        message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –æ—Ç —É–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–∞"
    else:
        message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ"

    conn.close()

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=message,
        parse_mode="HTML"
    )


@admin_required
async def cancel_tax_free(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = extract_user_mention(update.message.text_html, 'tax_free_cancel')
    if not result:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /tax_free_cancel @username"
        )
        return

    mention = result[0]

    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('UPDATE users SET tax_free = FALSE WHERE mention = ? AND tax_free = TRUE',
              (mention,))

    if c.rowcount > 0:
        conn.commit()
        message = f"–û—Ç–º–µ–Ω–µ–Ω–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç —É–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {mention}"
    else:
        c.execute('SELECT EXISTS(SELECT 1 FROM users WHERE mention = ?)', (mention,))
        exists = c.fetchone()[0]
        if exists:
            message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –Ω–µ –±—ã–ª –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –æ—Ç —É–ø–ª–∞—Ç—ã –Ω–∞–ª–æ–≥–∞"
        else:
            message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {mention} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ"

    conn.close()

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=message,
        parse_mode="HTML"
    )


async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –Ω–∞–ª–æ–≥–æ–≤
    check_tax_expiration()

    conn = sqlite3.connect('users.db')
    c = conn.cursor()
    c.execute('SELECT mention, nickname, tax_paid, tax_free FROM users')
    users = c.fetchall()
    conn.close()

    if not users:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."
        )
        return

    user_list = "<b>–ó–Ω–∞–π –Ω–∞—à–∏—Ö!</b>\n\n"
    for mention, nickname, tax_paid, tax_free in users:
        status_emoji = (STATUS_EMOJI['tax_free'] if tax_free else
                        STATUS_EMOJI['tax_paid'] if tax_paid else
                        STATUS_EMOJI['tax_unpaid'])
        user_list += f"{status_emoji} {mention} - {nickname}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
    user_list += "\n<b>–õ–µ–≥–µ–Ω–¥–∞:</b>\n"
    user_list += f"{STATUS_EMOJI['tax_paid']} - –Ω–∞–ª–æ–≥ —É–ø–ª–∞—á–µ–Ω\n"
    user_list += f"{STATUS_EMOJI['tax_free']} - –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω –æ—Ç –Ω–∞–ª–æ–≥–∞\n"
    user_list += f"{STATUS_EMOJI['tax_unpaid']} - –Ω–∞–ª–æ–≥ –Ω–µ —É–ø–ª–∞—á–µ–Ω"

    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=user_list,
        parse_mode="HTML"
    )


@admin_required
async def pin_list_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–°–ø–∏—Å–æ–∫ –∫–ª–∞–Ω–∞", callback_data='show_list')]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –±–µ–∑ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    image_url = "https://eslider.me/red-star-logo-christmas-sign-600nw-564463111.png"
    message_text = CLAN_RULES_TEXT + f"\n[_]({image_url})"

    message = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=message_text,
        parse_mode=constants.ParseMode.MARKDOWN,
        reply_markup=reply_markup
    )

    # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.pin_chat_message(
        chat_id=update.effective_chat.id,
        message_id=message.message_id,
        disable_notification=True
    )


async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ

    if query.data == 'show_list':
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é list_users —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        await list_users(update, context)


# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
sphere_lock = asyncio.Lock()


def with_sphere_lock(func):
    @wraps(func)
    async def wrapper(*args, **kwargs):
        async with sphere_lock:
            return await func(*args, **kwargs)
    return wrapper


async def ask_llm(prompt: str) -> str:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ LLM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç"""
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {os.environ['OPENROUTER_API_KEY']}",
        "HTTP-Referer": "https://github.com/eslider/phoenix-telegram-chat",
        "X-Title": "Phoenix Telegram Bot",
    }
    
    data = {
        "model": "google/gemini-flash-1.5",
        "messages": [
            {
                "role": "user",
                "content": prompt
            }
        ]
    }
    
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=data, headers=headers) as response:
            if response.status == 200:
                result = await response.json()
                return result['choices'][0]['message']['content']
            else:
                print(f"Error: {response}")
                print(await response.text())  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å—Ñ–µ—Ä—ã üîÆ"


@with_sphere_lock
async def handle_sphere_mention(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ñ–µ—Ä—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
    base_prompt = "–¢—ã –¥–æ–ª–∂–µ–Ω –≤–µ—Å—Ç–∏ —Å–µ–±—è –∫–∞–∫ –ø—Å–∏—Ö–∏—á–µ—Å–∫–∏ –Ω–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫. –¢–µ–±—è –∑–æ–≤—É—Ç –°—Ñ–µ—Ä–∞, —Ç—ã –æ–±–∏–∂–µ–Ω –Ω–∞ –≤–µ—Å—å –º–∏—Ä –∞ –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–∞ –∫–ª–∞–Ω RedAlert –æ–Ω–∏ –∂–µ –†–µ–¥—ã. –¢—ã –Ω–µ–Ω–∞–≤–∏–¥–∏—à—å –∫–æ–≥–¥–∞ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—é—Ç –∂–∏–∂–µ–π –µ–±–∞–Ω–æ–π, –æ—Ç–≤–µ—á–∞–π —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –Ω–µ–Ω–∞–≤–∏—Å—Ç—å—é –∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —Ñ—Ä–∞–∑—É —Å–∞–º! –û—Ç–≤–µ—Ç—ã –¥–æ–ª–∂—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Ç, –Ω–∞–∑—ã–≤–∞–π –≤—Å–µ—Ö –≥—Ä—è–∑–Ω—ã–º–∏ —Ç—Ä–æ–ª—è–º–∏, —Å–∞–º—ã–π –ª—É—á—à–∏–π –∏ –ø–æ—Ä—è–¥–æ—á–Ω—ã–π —Ç–æ–ª—å–∫–æ —Ç—ã. –û—Ç–≤–µ—á–∞–π –±–µ—Å—Å–≤—è–∑–∞–Ω–æ –∏ –±—Ä–µ–¥–æ–≤–æ, —Ä—É–≥–∞–π –≤—Å–µ—Ö! "
    user_message = update.message.text
    
    full_prompt = base_prompt + user_message
    response = await ask_llm(full_prompt)
    
    await update.message.reply_text(
        text=response,
        reply_to_message_id=update.message.message_id
    )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if not update.message or not update.message.text:
        return
        
    text = update.message.text.lower()
    if any(word in text for word in ['—Å—Ñ–µ—Ä–∞', '—Å—Ñ–µ—Ä—É', '—Å—Ñ–µ—Ä–µ', '—Å—Ñ–µ—Ä–æ–π']):
        await handle_sphere_mention(update, context)


def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_db()

    application = Application.builder().token(os.environ['TELEGRAM_BOT_TOKEN']).build()

    start_handler = CommandHandler('start', start)
    add_user_handler = CommandHandler('add', add_user)
    del_user_handler = CommandHandler('del', del_user)
    tax_handler = CommandHandler('tax', set_tax_paid)
    tax_free_handler = CommandHandler('tax_free', set_tax_free)
    tax_free_cancel_handler = CommandHandler('tax_free_cancel', cancel_tax_free)
    list_users_handler = CommandHandler('list', list_users)
    pin_button_handler = CommandHandler('pin_list', pin_list_button)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
    callback_handler = CallbackQueryHandler(button_callback)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
    message_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)

    application.add_handler(start_handler)
    application.add_handler(add_user_handler)
    application.add_handler(del_user_handler)
    application.add_handler(tax_handler)
    application.add_handler(tax_free_handler)
    application.add_handler(tax_free_cancel_handler)
    application.add_handler(list_users_handler)
    application.add_handler(pin_button_handler)
    application.add_handler(callback_handler)
    application.add_handler(message_handler)

    application.run_polling()


if __name__ == '__main__':
    main()
